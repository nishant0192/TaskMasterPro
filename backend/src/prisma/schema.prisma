// backend/src/prisma/schema.prisma - Complete updated schema with AI integration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // e.g., postgres://user:password@host:port/db
}

generator client {
  provider = "prisma-client-js"
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  passwordHash    String?   // Nullable if using OAuth only
  oauthProvider   String?   // e.g., "google", "facebook"
  oauthProviderId String?
  name            String?
  profileImage    String?   // URL to profile image
  isActive        Boolean   @default(true)
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Fields for password reset functionality
  resetPasswordToken   String?
  resetPasswordExpires DateTime?

  refreshTokenVersion Int     @default(0)
  expoPushToken       String?

  // Relations
  teams               TeamMembership[]
  tasksCreated        Task[]               @relation("tasks_created")
  tasksAssigned       Task[]               @relation("tasks_assigned")
  attachments         Attachment[]
  notifications       Notification[]
  auditLogs           AuditLog[]
  teamsCreated        Team[]
  comments            Comment[]
  
  // AI-related relations
  aiConfig            AIServiceConfig?
  aiFeedback          AIFeedback[]
  productivityMetrics ProductivityMetrics[]
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members       TeamMembership[]
  tasks         Task[]
  createdBy     User?            @relation(fields: [createdById], references: [id])
  createdById   String?
  notifications Notification[]

  @@index([createdById])
}

model TeamMembership {
  id       String   @id @default(uuid())
  role     TeamRole
  user     User     @relation(fields: [userId], references: [id])
  team     Team     @relation(fields: [teamId], references: [id])
  userId   String
  teamId   String
  joinedAt DateTime @default(now())

  @@unique([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("TODO")
  priority    Int?
  dueDate     DateTime?
  reminderAt  DateTime? // Reminder date
  completedAt DateTime?
  isArchived  Boolean   @default(false)
  progress    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // AI-related fields
  estimatedDuration Int?      // Duration in minutes
  complexity        Int?      // 1-5 scale (1=simple, 5=complex)
  aiPriorityScore   Float?    // AI-calculated priority score (0.0-1.0)
  aiConfidence      Float?    // AI confidence in predictions (0.0-1.0)
  aiLastAnalyzed    DateTime? // When AI last analyzed this task
  aiPredictions     Json?     // Store AI predictions as JSON
  aiInsights        Json?     // Store AI insights as JSON

  // Relations
  creator    User    @relation("tasks_created", fields: [creatorId], references: [id])
  creatorId  String
  assignee   User?   @relation("tasks_assigned", fields: [assigneeId], references: [id])
  assigneeId String?
  team       Team?   @relation(fields: [teamId], references: [id])
  teamId     String?

  // Child relations
  subtasks      Subtask[]
  comments      Comment[]
  attachments   Attachment[]
  auditLogs     AuditLog[]
  notifications Notification[]
  aiFeedback    AIFeedback[]

  @@index([creatorId])
  @@index([assigneeId])
  @@index([teamId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([aiPriorityScore])
  @@index([aiLastAnalyzed])
  @@index([estimatedDuration])
  @@index([complexity])
  @@index([isArchived])
  @@index([completedAt])
  
  // Composite indexes for AI queries
  @@index([creatorId, status, aiPriorityScore])
  @@index([creatorId, isArchived, dueDate])
  @@index([creatorId, aiLastAnalyzed])
}

model Subtask {
  id                String    @id @default(uuid())
  title             String
  isCompleted       Boolean   @default(false)
  order             Int       @default(0)
  reminderAt        DateTime? // Subtask reminder time
  estimatedDuration Int?      // Duration in minutes (AI can set this)
  aiGenerated       Boolean   @default(false) // Whether this was generated by AI
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt @default(now())

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@index([taskId])
  @@index([isCompleted])
  @@index([order])
  @@index([aiGenerated])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@index([taskId])
  @@index([authorId])
  @@index([createdAt])
}

model Attachment {
  id         String   @id @default(uuid())
  fileName   String
  fileType   String?  // MIME type or category
  fileSize   Int?
  fileUrl    String   // URL/path to file in external storage (e.g., S3, Cloudinary)
  uploadedAt DateTime @default(now())

  // Relations
  task         Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId       String
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String?

  @@index([taskId])
  @@index([uploadedById])
  @@index([uploadedAt])
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  title     String?  // Optional title for the notification
  type      String   @default("info") // "info", "warning", "error", "success"
  isRead    Boolean  @default(false)
  priority  Int      @default(1) // 1=low, 2=medium, 3=high
  createdAt DateTime @default(now())
  readAt    DateTime? // When the notification was read

  // Optional relations: a notification can target an individual user, a team, or be linked to a task
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String?

  @@index([userId])
  @@index([teamId])
  @@index([isRead])
  @@index([createdAt])
  @@index([priority])
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String   // e.g., "TASK_CREATED", "AI_PRIORITIZATION", "TASK_UPDATED"
  description String?  // Detailed message or JSON diff of changes
  metadata    Json?    // Additional structured data about the action
  ipAddress   String?  // IP address of the user (for security auditing)
  userAgent   String?  // User agent string
  createdAt   DateTime @default(now())

  // Relation: which user performed this action
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Polymorphic relation: reference to the affected entity (e.g., Task, Attachment)
  entityType String? // e.g., "Task", "Attachment", "User"
  entityId   String? // The UUID of the affected entity
  task       Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String?

  @@index([entityType, entityId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([userId, createdAt]) // Composite index for user activity logs
}

// AI service configuration per user
model AIServiceConfig {
  id        String   @id @default(uuid())
  userId    String   @unique // One config per user
  
  // AI Feature preferences
  enablePrioritization Boolean @default(true)
  enablePredictions    Boolean @default(true)
  enableScheduling     Boolean @default(true)
  enableNLP            Boolean @default(true)
  enableInsights       Boolean @default(true)
  
  // AI behavior settings
  prioritizationWeight Float @default(0.5) // How much to weight AI vs user priority
  riskTolerance       String @default("medium") // "low", "medium", "high"
  insightFrequency    String @default("weekly") // "daily", "weekly", "monthly"
  
  // Learning preferences
  learningEnabled     Boolean @default(true)
  feedbackEnabled     Boolean @default(true)
  
  // Cache settings
  cacheEnabled        Boolean @default(true)
  cacheDuration       Int     @default(300) // seconds
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// AI feedback and learning tracking
model AIFeedback {
  id           String   @id @default(uuid())
  userId       String
  taskId       String?
  feedbackType String   // "priority", "prediction", "subtask", "insight"
  operation    String   // The AI operation that was rated
  rating       Int      // 1-5 star rating
  comment      String?  // Optional text feedback
  wasHelpful   Boolean? // Simple yes/no for quick feedback
  
  // Context data
  originalData Json?    // Original AI output
  userAction   String?  // What the user did after AI suggestion
  
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([taskId])
  @@index([feedbackType])
  @@index([rating])
  @@index([createdAt])
}

// User productivity metrics for AI insights
model ProductivityMetrics {
  id         String   @id @default(uuid())
  userId     String
  date       DateTime // Date of the metrics (daily aggregation)
  
  // Task metrics
  tasksCreated    Int @default(0)
  tasksCompleted  Int @default(0)
  tasksOverdue    Int @default(0)
  avgCompletionTime Float? // in minutes
  
  // Time metrics
  totalFocusTime  Int @default(0) // in minutes
  totalBreakTime  Int @default(0) // in minutes
  workSessions    Int @default(0)
  
  // Quality metrics
  qualityScore    Float? // 0.0-1.0
  priorityAccuracy Float? // How accurate were user's initial priorities
  
  // AI metrics
  aiSuggestionsUsed    Int @default(0)
  aiSuggestionsIgnored Int @default(0)
  aiAccuracyScore      Float? // How accurate were AI predictions
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([userId, date])
}